import React, { useState, useEffect } from 'react';
import { 
  Card, 
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription
} from "../ui/card";
import { Skeleton } from "../ui/skeleton";
import { Badge } from "../ui/badge";
import { Button } from "../ui/button";
import { Play, Pause, RefreshCw } from "lucide-react";

// Types of animations supported
export type AnimationType = 'neural-network' | 'blockchain' | 'waveform';

// Props for the animation player
interface AnimationPlayerProps {
  type: AnimationType;
  title: string;
  description?: string;
  frames: string[]; // Base64 encoded frames
  fps?: number;
  autoPlay?: boolean;
  loop?: boolean;
  className?: string;
  onComplete?: () => void;
}

/**
 * Animation Player Component
 * Displays frame-by-frame animations generated by Python
 */
const AnimationPlayer: React.FC<AnimationPlayerProps> = ({
  type,
  title,
  description,
  frames,
  fps = 15,
  autoPlay = true,
  loop = true,
  className = '',
  onComplete
}) => {
  const [currentFrame, setCurrentFrame] = useState<number>(0);
  const [isPlaying, setIsPlaying] = useState<boolean>(autoPlay);
  const [isLoading, setIsLoading] = useState<boolean>(true);

  // Animation timing control
  useEffect(() => {
    setIsLoading(frames.length === 0);

    let animationTimer: NodeJS.Timeout | null = null;

    if (isPlaying && frames.length > 0) {
      animationTimer = setInterval(() => {
        setCurrentFrame(prevFrame => {
          const nextFrame = prevFrame + 1;
          
          // Handle end of animation
          if (nextFrame >= frames.length) {
            if (loop) {
              // Loop back to start
              return 0;
            } else {
              // Stop at the end
              setIsPlaying(false);
              if (onComplete) onComplete();
              return prevFrame;
            }
          }
          
          return nextFrame;
        });
      }, 1000 / fps);
    }

    return () => {
      if (animationTimer) clearInterval(animationTimer);
    };
  }, [isPlaying, frames, fps, loop, onComplete]);

  // Reset animation when frames change
  useEffect(() => {
    setCurrentFrame(0);
    setIsPlaying(autoPlay);
    setIsLoading(frames.length === 0);
  }, [frames, autoPlay]);

  // Handle play/pause toggle
  const togglePlayPause = () => {
    setIsPlaying(!isPlaying);
  };

  // Handle restart
  const restartAnimation = () => {
    setCurrentFrame(0);
    setIsPlaying(true);
  };

  // Animation type badge
  const getBadgeForType = (type: AnimationType) => {
    switch (type) {
      case 'neural-network':
        return <Badge className="bg-blue-500">Neural Network</Badge>;
      case 'blockchain':
        return <Badge className="bg-green-500">Blockchain</Badge>;
      case 'waveform':
        return <Badge className="bg-purple-500">Waveform</Badge>;
      default:
        return <Badge>Animation</Badge>;
    }
  };

  return (
    <Card className={`overflow-hidden ${className}`}>
      <CardHeader className="pb-2">
        <div className="flex justify-between items-center">
          <CardTitle className="text-lg">{title}</CardTitle>
          {getBadgeForType(type)}
        </div>
        {description && (
          <CardDescription>{description}</CardDescription>
        )}
      </CardHeader>
      
      <CardContent className="p-2">
        <div className="relative aspect-video bg-black/10 rounded-md overflow-hidden">
          {isLoading ? (
            <div className="w-full h-full flex items-center justify-center">
              <Skeleton className="w-full h-full" />
            </div>
          ) : (
            <>
              <img 
                src={`data:image/png;base64,${frames[currentFrame]}`}
                alt={`Animation frame ${currentFrame + 1} of ${frames.length}`}
                className="w-full h-full object-contain"
              />
              
              {/* Overlay controls */}
              <div className="absolute bottom-2 left-0 right-0 flex justify-center gap-2 opacity-80 hover:opacity-100 transition-opacity">
                <Button 
                  size="sm" 
                  variant="secondary" 
                  className="h-8 w-8 p-0" 
                  onClick={togglePlayPause}
                >
                  {isPlaying ? <Pause size={14} /> : <Play size={14} />}
                </Button>
                
                <Button 
                  size="sm" 
                  variant="secondary" 
                  className="h-8 w-8 p-0"
                  onClick={restartAnimation}
                >
                  <RefreshCw size={14} />
                </Button>
              </div>

              {/* Progress bar */}
              <div className="absolute bottom-0 left-0 right-0 h-1 bg-gray-800">
                <div 
                  className="h-full bg-primary transition-all duration-200"
                  style={{
                    width: `${((currentFrame + 1) / frames.length) * 100}%`
                  }}
                />
              </div>
            </>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

export default AnimationPlayer;